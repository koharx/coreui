name: Release

on:
  push:
    branches: [main]

jobs:
  release:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, 'ci skip') && !contains(github.event.head_commit.message, 'skip ci')"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          registry-url: "https://registry.npmjs.org"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Build package
        run: npm run build

      - name: Check for conventional commits
        id: check
        run: |
          echo "Checking for conventional commits..."

          # Check if we have any tags
          if git tag --list | grep -q .; then
            # We have tags, get the latest one
            LATEST_TAG=$(git describe --tags --abbrev=0)
            echo "Latest tag: $LATEST_TAG"
            COMMIT_RANGE="$LATEST_TAG..HEAD"
          else
            # No tags exist, check last 10 commits
            echo "No tags found, checking last 10 commits"
            COMMIT_RANGE="HEAD~10..HEAD"
          fi

          # Show recent commits
          echo "Recent commits in range $COMMIT_RANGE:"
          git log --oneline $COMMIT_RANGE || echo "No commits in range"

          # Check for conventional commits
          CONVENTIONAL_COMMITS=$(git log --oneline $COMMIT_RANGE 2>/dev/null | grep -E "^(feat|fix|BREAKING CHANGE)" || echo "")

          if [ -n "$CONVENTIONAL_COMMITS" ]; then
            echo "Found conventional commits:"
            echo "$CONVENTIONAL_COMMITS"
            echo "has_conventional_commits=true" >> $GITHUB_OUTPUT
          else
            echo "No conventional commits found."
            echo "has_conventional_commits=false" >> $GITHUB_OUTPUT
          fi

      - name: Version and Release
        if: steps.check.outputs.has_conventional_commits == 'true'
        run: |
          echo "Starting version and release process..."

          git config --local user.email "harshad.karemore@gmail.com"
          git config --local user.name "Harshad Karemore"

          # Check if we have any tags
          if git tag --list | grep -q .; then
            # We have tags, get the latest one
            LATEST_TAG=$(git describe --tags --abbrev=0)
            COMMIT_RANGE="$LATEST_TAG..HEAD"
          else
            # No tags exist, check last 10 commits
            COMMIT_RANGE="HEAD~10..HEAD"
          fi

          # Determine version bump type based on commit messages
          if git log --oneline $COMMIT_RANGE 2>/dev/null | grep -q "BREAKING CHANGE"; then
            VERSION_TYPE="major"
            echo "Bumping major version"
          elif git log --oneline $COMMIT_RANGE 2>/dev/null | grep -q "^feat"; then
            VERSION_TYPE="minor"
            echo "Bumping minor version"
          else
            VERSION_TYPE="patch"
            echo "Bumping patch version"
          fi

          # Bump version
          npm version $VERSION_TYPE --no-git-tag-version

          # Get new version
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "New version: $NEW_VERSION"

          # Generate changelog
          npm run changelog

          # Commit changes
          git add package.json CHANGELOG.md
          git commit -m "chore: release version $NEW_VERSION"

          # Create and push tag
          git tag "v$NEW_VERSION"
          git push origin main
          git push origin "v$NEW_VERSION"

          echo "Released version $NEW_VERSION"
